<?xml version="1.0"?>
<launch>

  <!-- Arguments for gazebo: -->

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="assignment_world" />
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find assignment2)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)"
        args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
  

  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" />
  </group>
  

  <!-- robot model -->

  <arg name="x" default="-6"/>
  <arg name="y" default="11"/>
  <arg name="z" default="0"/>

  <arg name="model" default="$(find assignment2)/urdf/mobile_manipulator.xacro" />
  
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)" />

  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model mobile_manipulator
              -x $(arg x) -y $(arg y) -z $(arg z)"   />

  <!-- robot arm controller -->
  <rosparam command="load" file="$(find assignment2)/config/arm_control.yaml" />
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" />
  
  <!-- joint state controller -->
  <rosparam command="load" file="$(find assignment2)/config/joint_state_controller.yaml" />
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" />
  

  <rosparam command="load" file="$(find assignment2)/config/control.yaml" />
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="robot_base_joint_publisher "/>


<!-- Start Robot State Publisher   -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" />

<!-- Start Joint State Publisher -->
  <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" />

<!-- Start Rviz --> 
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find assignment2)/config/mobile_manipulator.rviz" launch-prefix= "xterm -e" />

<!-- Start GMAPPING -->

 <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" launch-prefix= "xterm -e" >
    <param name="base_frame" value="base_link"/>
      <param name="map_update_interval" value="5.0"/>
      <param name="maxUrange" value="16.0"/>
      <param name="sigma" value="0.05"/>
      <param name="kernelSize" value="1"/>
      <param name="lstep" value="0.05"/>
      <param name="astep" value="0.03"/>
      <param name="iterations" value="3"/>
      <param name="lsigma" value="0.075"/>
      <param name="ogain" value="3.0"/>
      <param name="lskip" value="0"/>
      <param name="srr" value="0.1"/>
      <param name="srt" value="0.1"/>
      <param name="str" value="0.1"/>
      <param name="stt" value="0.1"/>
      <param name="linearUpdate" value="1.0"/>
      <param name="angularUpdate" value="0.2"/>
      <param name="temporalUpdate" value="3.0"/>
      <param name="resampleThreshold" value="0.5"/>
      <param name="particles" value="20"/>
      <param name="xmin" value="-50.0"/>
      <param name="ymin" value="-50.0"/>
      <param name="xmax" value="50.0"/>
      <param name="ymax" value="50.0"/>
      <param name="delta" value="0.05"/>
      <param name="llsamplerange" value="0.01"/>
      <param name="llsamplestep" value="0.01"/>
      <param name="lasamplerange" value="0.005"/>
      <param name="lasamplestep" value="0.005"/>
      <param name="transform_publish_period" value="0.0005"/>
    </node>

<!-- Start MoveBase -->

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" launch-prefix= "xterm -e" >

    <rosparam file="$(find assignment2)/param/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find assignment2)/param/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find assignment2)/param/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/param/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/param/base_local_planner_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/param/move_base_params.yaml" command="load"/>

  </node>

<!-- Start ARUCO -->
<arg name="markerSize"      default="0.05"/>    <!-- in m -->
<arg name="side"             default="left"/>
<arg name="ref_frame"       default="base"/>  <!-- leave empty and the pose will be published wrt param parent_name -->



<node pkg="assignment2" type="marker_server_id" name="marker_service_id" args="/image:=/camera1/image_raw" />


<node name="marker_server" pkg="assignment2" type="marker_server" />

<node pkg = "assignment2" type = "robot_state.py" name = "robot_state" output= "screen"/>

<node pkg = "assignment2" type = "choose_move.py" name = "choose_move_server" output = "screen" />

<node pkg = "assignment2" type = "execute_move.py" name = "execute_move_server" output = "screen" />

<node pkg = "assignment2" type = "home_surveilance_state_machine.py" name = "surveyor_state_machine" output = "screen" />



</launch>
